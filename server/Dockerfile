FROM python:3.11.6

MAINTAINER Heimo MÃ¼ller "heimo.mueller@mac.com"

ENV PYTHONUNBUFFERED 1
ENV CELERY_BROKER_URL       redis://redis:6379/0
ENV CELERY_RESULT_BACKEND   redis://redis:6379/0
ENV C_FORCE_ROOT true

ENV OPENCV_VERSION 3.4.2

RUN apt-get update
RUN apt-get install -y \
  autoconf \
  automake \
  build-essential \
  cmake \
  git-core \
  libass-dev \
  libfreetype6-dev \
  libsdl2-dev \
  libtool \
  libva-dev \
  libvdpau-dev \
  libvorbis-dev \
  libxcb1-dev \
  libxcb-shm0-dev \
  libxcb-xfixes0-dev \
  pkg-config \
  texinfo \
  wget \
  zlib1g-dev

RUN apt-get install -y \
    nasm \
    yasm

RUN apt-get install -y \
    libmp3lame-dev \
    checkinstall

RUN apt-get install -y libopus-dev  libx264-164 libx264-dev

RUN mkdir -p /tmp
WORKDIR /tmp

#
#  FFMPEG with openssl support
#

RUN     wget https://www.ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2
RUN     tar jxvf ffmpeg-snapshot.tar.bz2
WORKDIR /tmp/ffmpeg
RUN     ./configure --prefix=/usr --enable-openssl --enable-gpl --enable-shared  --disable-static --enable-pic --enable-nonfree --enable-libass  --enable-libfreetype --enable-libmp3lame --enable-libopus  --enable-libvorbis --enable-libx264
RUN     make -j 8
RUN     checkinstall
RUN     dpkg --install ffmpeg_*.deb

#LIB GENERATED BY FFMPEG
#libavutil contains various routines used to simplify programming, including random number generators, data structures, mathematics routines, core multimedia utilities, and much more.
#libavcodec provides a decoding and encoding API, and all the supported codecs.
#libavformat provides a demuxing and muxing API, and all the supported muxers and de-muxers.
#libavdevice provides an interface for grabbing from input devices (e.g. webcames or line-in audio) and rendering to output devices, and all the supported input and output devices
#libswscale provides a scaling and (raw pixel) format conversions API, with high speed/assembly optimized versions of several scaling routines.
#libavfilter provides an audio and video filtering API, and all the supported filters.
#libpostproc provides video postprocessing routines
#libswresample provides an audio resampling, rematrixing and sample format conversion API, and many high-quality optimized routines.


RUN apt-get install -y python-matplotlib python-scipy python-skimage
RUN apt-get install -y unzip python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev

#
#  YOUTUBE-DL
#
RUN     wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
RUN     chmod a+rx /usr/local/bin/youtube-dl

#
#  OPEN CV
#
WORKDIR /tmp
RUN  cd /tmp
RUN  wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip -O opencv3.zip && \
    unzip -q opencv3.zip && \
    mv opencv-$OPENCV_VERSION opencv && \
    rm opencv3.zip && \
    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip -O opencv_contrib3.zip && \
    unzip -q opencv_contrib3.zip && \
    mv opencv_contrib-$OPENCV_VERSION opencv_contrib && \
    rm opencv_contrib3.zip

RUN         mkdir -p /tmp/opencv/build
RUN         cd /tmp/opencv/build
WORKDIR     /tmp/opencv/build
RUN  cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib/modules \
      -D BUILD_EXAMPLES=OFF \
      -D PYTHON_DEFAULT_EXECUTABLE=/usr/local/bin/python \
      -D PYTHON_INCLUDE_DIR=/usr/local/include \
      -D PYTHON_LIBRARY=/usr/local/bin \
      -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.6/site-packages/numpy/core/include/numpy \
      -D BUILD_opencv_python3=ON \
      -D BUILD_opencv_python2=OFF \
      -D WITH_IPP=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_V4L=ON ..

RUN make -j8
RUN make install
RUN ldconfig
#
# FLASK SERVER
#

RUN mkdir -p /usr/src/movieannotator

# Update working directory
WORKDIR /usr/src/movieannotator

# copy everything from this directory to server/flask docker container
COPY ./requirements.txt /usr/src/movieannotator
COPY ./entrypoint.sh    /usr/src/movieannotator
COPY ./*.py      /usr/src/movieannotator/
COPY ./uwsgi.*   /usr/src/movieannotator/
COPY ./.env      /usr/src/movieannotator

# Give execute permission to below file, so that the script can be executed by docker.
RUN chmod 777 /usr/src/movieannotator/entrypoint.sh

RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# COPY uswgi.ini
COPY ./uwsgi.ini /etc/uwsgi.ini

RUN mkdir -p /data/movies

EXPOSE 5000

# run server
CMD ["./entrypoint.sh"]